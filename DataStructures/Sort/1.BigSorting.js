const x = `1852684712373946644047126128874343606551889806987580680183666078535732840587979021961565320888144876580296343072347597403073523339824105028634212169452054521310517525364163618081741785397344269090312972521369251913855741131451598461283205547324125791299950459837050659106811967338179538137559722014266842549549092727748933807894886814867323342759927551548101685839596519081039805576283939033003041277497954378196724643948247794252120321440307772882943072663091805
921483614932272845681627960861644039077190638108955442181289121045591493465949984394765888495632867456182321371573929743839033527472551621965069390168261349306177889000539238922461355508891483734628240329838980396952712450962966066876911365996143134569889306312004946209937246311580235493434947207981147785750752663024743289850171662103415156132061567931779960593978178983383185611359547791646799824512393012567631591979071486537260181385732710741081930581594233247789416513283451042946445657234`;
const ip = x.split('\n');

function swap(a, i, j) {
  var t = a[i];
  a[i] = a[j];
  a[j] = t;
}

function partition(a, left, right) {
  var pivot = a[Math.floor((left + right) / 2)],
    i = left,
    j = right;
  while (i <= j) {
    while (a[i] < pivot) {
      i++;
    }
    while (pivot < a[j]) {
      j--;
    }

    if (i <= j) {
      swap(a, i, j);
      i++;
      j--;
    }
  }
  return i;
}

function quickSort(a, left, right) {
  var index = index || 0;

  if (a.length > 1) {
    index = partition(a, left, right);

    if (left < index - 1) {
      quickSort(a, left, index - 1);
    }

    if (index < right) {
      quickSort(a, index, right);
    }
  }
  return a;
}

function bubbleSort(a) {
  // 1 2 30 10 40 50
  // + i =0
  // 1 2 30 10 40 50
  // + i = 1
  // 2 1 30 10 40 50
  // + i = 3
  // 30

  // 1 2 30 10 40 50
  // + i=0
  //    + j=0
  // 1 2 30 10 40 50
  //    + j=1
  //    + j=2
  // 1 2 10 30 40 50
  // 1 2 10 30 40 50
  // 1 2 10 30 40 50

  for (let i = 0; i < a.length; ++i) {
    for (let j = 0; j < a.length; ++j) {
      if (a[j] > a[j + 1]) {
        swap(a, j, j + 1);
      }
    }
  }
}

function bigSorting(a) {
  const t = [
    '1852684712373946644047126128874343606551889806987580680183666078535732840587979021961565320888144876580296343072347597403073523339824105028634212169452054521310517525364163618081741785397344269090312972521369251913855741131451598461283205547324125791299950459837050659106811967338179538137559722014266842549549092727748933807894886814867323342759927551548101685839596519081039805576283939033003041277497954378196724643948247794252120321440307772882943072663091805',
    '921483614932272845681627960861644039077190638108955442181289121045591493465949984394765888495632867456182321371573929743839033527472551621965069390168261349306177889000539238922461355508891483734628240329838980396952712450962966066876911365996143134569889306312004946209937246311580235493434947207981147785750752663024743289850171662103415156132061567931779960593978178983383185611359547791646799824512393012567631591979071486537260181385732710741081930581594233247789416513283451042946445657234'
  ];
  console.log(
    t[0] ===
      '1852684712373946644047126128874343606551889806987580680183666078535732840587979021961565320888144876580296343072347597403073523339824105028634212169452054521310517525364163618081741785397344269090312972521369251913855741131451598461283205547324125791299950459837050659106811967338179538137559722014266842549549092727748933807894886814867323342759927551548101685839596519081039805576283939033003041277497954378196724643948247794252120321440307772882943072663091805'
  );

  var ret = quickSort(a, 0, a.length - 1);

  return ret;
}
// bigSorting(ip);
console.log(bigSorting(ip));
